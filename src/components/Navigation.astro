---
import MenuIcon from "./MenuIcon.astro";
import Github from "../icon/Github.astro";
import Linkedin from "../icon/Linkedin.astro";

const NAVIGATION_LINKS = [
  {
    title: "Inicio",
    href: "#home",
  },
  {
    title: "Proyectos",
    href: "#projects",
  },
  {
    title: "Experiencia",
    href: "#experience",
  },
  {
    title: "Sobre mí",
    href: "#about",
  },
  {
    title: "Contacto",
    href: "#contact",
  },
];

const SOCIAL_LINKS = [
  {
    component: Github,
    title: "github",
    href: "https://github.com/joruizdev",
    icon: "github.svg",
  },
  {
    component: Linkedin,
    title: "linkedin",
    href: "https://www.linkedin.com/in/jose-ruiz-7b5b3b1b3/",
    icon: "linkedin.svg",
  },
];
---

<input type="checkbox" id="menu" hidden class="peer" />

<label
  for="menu"
  class="w-12 h-12 flex items-center bg-[#eeeeee] dark:bg-[#29323f] justify-center rounded-full fixed right-4 bottom-4 xl:relative z-50 xl:hidden peer-checked:[&>.first]:hidden peer-checked:[&>.last]:block cursor-pointer transition"
>
  <MenuIcon />
</label>

<nav class="z-40 xl:flex hidden gap-10" id="navMenu">
  {
    NAVIGATION_LINKS.map(({ title, href }) => {
      return (
        <a
          class=" text-lg transition-all duration-300 ease-in-out dark:text-fountain-blue-500 dark:hover:text-yellow-500 text-stone-700 hover:text-yellow-500"
          href={href}
        >
          {title}
        </a>
      );
    })
  }
</nav>

<!-- <script type="module">
  const sections = document.querySelectorAll("main > section");
  const links = document.querySelectorAll("#navbar a");

  let direction = "up";
  let prevYPosition = 0;

  const setScrollDirection = () => {
    direction =
      document.documentElement.scrollTop > prevYPosition ? "down" : "up";

    prevYPosition = document.documentElement.scrollTop;
  };

  const options = {
    root: null,
    threshold: 0,
    rootMargin: "0px",
  };

  const getTargetSection = (entry) => {
    const index = sections.findIndex((section) => section === entry.target);

    if (index >= sections.length - 1) {
      return entry.target;
    } else {
      return sections[index + 1];
    }
  };

  const updateLink = (target) => {
    console.log("updateLink", target);
  };

  const onIntersect = (entries) => {
    entries.forEach((entry) => {
      if (document.documentElement > prevYPosition) {
        direction = "down";
      } else {
        direction = "up";
      }

      prevYPosition = document.documentElement.scrollTop;

      const target =
        direction === "down" ? getTargetSection(entry) : entry.target;

      if (shouldUpdate(entry)) {
        updateLink(target);
      }
    });
  };

  const shouldUpdate = (entry) => {
    if (direction === "down" && !entry.isIntersecting) {
      return true;
    }

    if (direction === "up" && entry.isIntersecting) {
      return true;
    }

    return false;
  };

  const observer = new IntersectionObserver(onIntersect, options);

  sections.forEach((section) => {
    observer.observe(section);
  });
</script> -->

<!-- <script type="module">
  const menuCheckbox = document.getElementById("menu");
  const mediaQuery = window.matchMedia("(min-width: 1024px)"); // Breakpoint lg

  const $navbar = document.querySelector("#navbar");
  $navbar.querySelectorAll("a").forEach((anchor) => {
    anchor.addEventListener("click", (_event) => {
      menuCheckbox.checked = false;
      if (document.body.style.overflowY === "hidden") {
        hideOverFlow(false);
      }
    });
  });

  /** @param {boolean} value */
  function hideOverFlow(value) {
    document.body.style.overflowY = value ? "hidden" : "auto";
  }

  menuCheckbox.addEventListener("change", (e) =>
    e.target.checked ? hideOverFlow(true) : hideOverFlow(false)
  );

  mediaQuery.addEventListener("change", (e) => {
    if (e.matches) {
      hideOverFlow(false);
      menuCheckbox.checked = false;
    }
  });
</script> -->

<script>
  const navItems = document.querySelectorAll("header nav a");

  navItems.forEach((element) => {
    element.addEventListener("click", (e) => {
      // Remover la clase resaltada de todos los elementos del menú
      navItems.forEach((item) => {
        item.classList.remove("text-yellow-500");
      });

      // Agregar la clase resaltada al elemento clickeado
      element.classList.add("text-yellow-500");
    });
  });
</script>
